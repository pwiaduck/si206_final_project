import requests 
import json 
import sqlite3
import matplotlib.pyplot as plt
import os
import re
import math
import numpy as np

#  Client ID: MzMxMTQzMzB8MTY4MTY2NDgzMC44MjY1NjMx
#  app secret is 3373a058217d4c32f9d63156df24a5a1e1df1b337b8dd55665ad6d72da7f21f2

# https://api.seatgeek.com/2/events?client_id=MYCLIENTID

# Client ID: MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz
# app secret = a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d


def create_db(db):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path+'/'+db)
    cur = conn.cursor()
    return cur, conn

def get_data(client_id, client_secret, cur, conn):
    # Client ID: MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz
    # app secret = a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d

    d = {}
    lst = []
    for page_num in range(1,6):
        # print(page_num)
        # print()
        url = "https://api.seatgeek.com/2/events?client_id=MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz&client_secret=a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d&per_page=25&page={}".format(page_num)

        response = requests.get(url)
        json_data = response.json()
        # print(json_data)
        # print()
        lst.append(json_data)
    # print(len(lst))
    # print(lst[0])
    return lst

def find_unique_event_types(lst):
    types_lst = []
    for item in lst:
        for event in item["events"]:
            if event["type"] not in types_lst:
                types_lst.append(event["type"])    
    # print(types_lst)  
    return types_lst 

def create_type_table(cur, conn, lst):
    # cur.execute("DROP TABLE IF EXISTS SeatGeek_types")
    cur.execute("CREATE TABLE IF NOT EXISTS SeatGeek_types (id INTEGER PRIMARY KEY, type TEXT)")
    for i in range(0, len(lst)):
        cur.execute("INSERT INTO SeatGeek_types (id,type) VALUES (?,?)",(i,lst[i]))
        # print(i, lst[i-1])
    conn.commit()

def find_unique_cities(lst):
    cities_lst = []
    for item in lst:
        for event in item["events"]:
            if event["venue"]["city"] not in cities_lst:
                cities_lst.append(event["venue"]["city"])    
    # print(cities_lst)  
    return cities_lst 

def create_cities_table(cur, conn, lst):
    # cur.execute("DROP TABLE IF EXISTS SeatGeek_cities")
    cur.execute("CREATE TABLE IF NOT EXISTS SeatGeek_cities (id INTEGER PRIMARY KEY, city TEXT)")
    for i in range(0, len(lst)):
        cur.execute("INSERT INTO SeatGeek_cities (id,city) VALUES (?,?)",(i,lst[i]))
        # print(i, lst[i-1])
    conn.commit()

def find_performers(lst):
    performers_lst = []
    for item in lst:
        for event in item["events"]:
            if event["performers"][0]["name"] not in performers_lst:
                 performers_lst.append(event["performers"][0]["name"])  
    # print(len(performers_lst))
    return performers_lst

def find_types(lst):
    types = []
    for item in lst:
        for event in item["events"]:
            type = (event["type"])
            types.append(type)
    # print(types)
    return types

def find_cities(lst):
    cities = []
    for item in lst:
        for event in item["events"]:
            city = (event["venue"]["city"])
            cities.append(city)
    return cities

def assign_type_vals(unique, all):
    # print(unique)
    # print(all)
    lst_event_types = []
    for event in all:
        type_num = unique.index(event) + 1
        lst_event_types.append(type_num)
        # print(type_num, event)
        # print(len(lst_event_types))
    return lst_event_types   

def assign_city_vals(unique, all):
    lst_cities = []
    for city in all:
        city_num = unique.index(city) + 1
        lst_cities.append(city_num)
    # print(lst_cities)
    return lst_cities

def make_table(cur, conn, index, performers, types, cities):
    for i in range(index, index+25):
        # print(performers[i], types[i], cities[i])

        cur.execute("INSERT OR IGNORE INTO SeatGeek_events (id, performer, event, location) VALUES (?, ?, ?, ?)",(i, performers[i], types[i], cities[i]))
    conn.commit()
    
def main():

    # Create database
    cur, conn = create_db("final.db")

    client_id = "MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz"
    client_secret = "a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d"
   
   # Retrieve data from API
    data_lst = get_data(client_id, client_secret, cur, conn)

    # Create table and list with all event types
    types_unique = find_unique_event_types(data_lst)
    # create_type_table(cur, conn, event_types)

    # Create table and list with all cities
    cities_unique = find_unique_cities(data_lst)
    # create_cities_table(cur, conn, cities_lst)

    performers_lst = find_performers(data_lst)
    # get_events_data(data_lst, event_types, cities_lst, index)

    # GET ALL EVENT TYPES 
    types_all = find_types(data_lst)

    # GET ALL CITIES
    cities_all = find_cities(data_lst)

    # ASSIGN TYPE ID VALS
    id_types = assign_type_vals(types_unique, types_all)
    
    # ASSIGN CITY ID VALS
    id_cities = assign_city_vals(cities_unique, cities_all)

    # Create table with all events
    index = 0
    # cur.execute("DROP TABLE IF EXISTS SeatGeek_events")
    cur.execute("CREATE TABLE iF NOT EXISTS SeatGeek_events (id INTEGER PRIMARY KEY, performer TEXT, event INTEGER, location INTEGER)")
    
    cur.execute("SELECT COUNT('id') FROM SeatGeek_events")
    count = cur.fetchall()
    count = (count[0])
    count = count[0]

    # ADD 25 ROWS AT A TIME TO DATABASE
    index = count
    if count <= 100:
            index = 0
            if count == 25:
                index = 25
            elif count == 50:
                index = 50
            elif count == 75:
                index = 75
            else:
                index = 0

    make_table(cur, conn, index, performers_lst, id_types, id_cities)

    # CALCULATIONS 
    # Find the percentage brekdown of event type
    all = cur.execute("SELECT * FROM SeatGeek_events")
    total_lst = []
    for item in all:
        total_lst.append(item)
    total = len(total_lst)

    dict = {}
    count = 0
    for type in types_unique:
        count += 1
        info_lst = []
        type_num = cur.execute("SELECT SeatGeek_events.performer, SeatGeek_types.type FROM SeatGeek_events JOIN SeatGeek_types ON SeatGeek_events.event = SeatGeek_types.id WHERE SeatGeek_types.type = ?", (type, ))
        for row in type_num:
            info_lst.append(row)
        dict[count] = info_lst
    # print(dict)

    calculations_lst = []
    for key in dict:
        num = len(dict[key])
        val = num/total
        # print(val)
        percent = int(val * 100)
        calculations_lst.append(percent)
    # print(calculations_lst)

    # Write calculations to text file
    f = open("Calculations.txt", "w")
    f.write("SeatGeek Calculations\n")
    f.write("\n")
    f.write("Percentage breakdown of SeatGeek event types:\n")
    
    string = ""
    for (event, num) in zip(types_unique, calculations_lst):
        string = "Percentage of {} events: {}%".format(event, str(num))
        f.write(string)
        f.write("\n")
    
    f.close()

    # Create pie chart of breakdowns 
    fig, ax = plt.subplots(figsize =(10, 6))
    ax.set_title("SeatGeek Events Breakdown")

    y = np.array(calculations_lst)
    plt.pie(y, labels = types_unique, startangle = 25)
    
    plt.legend(title = "Event Types", loc='upper left', bbox_to_anchor=(1.05, 1))
    plt.show() 

main()
        