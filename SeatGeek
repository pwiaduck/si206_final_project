import requests 
import json 
import sqlite3
import matplotlib.pyplot as plt
import os
import re
import math
import numpy as np

#  Client ID: MzMxMTQzMzB8MTY4MTY2NDgzMC44MjY1NjMx
#  app secret is 3373a058217d4c32f9d63156df24a5a1e1df1b337b8dd55665ad6d72da7f21f2

# https://api.seatgeek.com/2/events?client_id=MYCLIENTID

# Client ID: MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz
# app secret = a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d


def create_db(db):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path+'/'+db)
    cur = conn.cursor()
    return cur, conn

def get_data(client_id, client_secret, cur, conn):
    # Client ID: MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz
    # app secret = a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d

    d = {}
    lst = []
    for page_num in range(1,5):
        # print(page_num)
        # print()
        url = "https://api.seatgeek.com/2/events?client_id=MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz&client_secret=a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d&per_page=25&page={}".format(page_num)

        response = requests.get(url)
        json_data = response.json()
        # print(json_data)
        # print()
        lst.append(json_data)
    # print(len(lst))
    # print(lst[0])
    return lst

def find_event_types(lst):
    types_lst = []
    for item in lst:
        for event in item["events"]:
            if event["type"] not in types_lst:
                types_lst.append(event["type"])    
    # print(types_lst)  
    return types_lst 

def create_type_table(cur, conn, lst):
    cur.execute("DROP TABLE IF EXISTS SeatGeek_types")
    cur.execute("CREATE TABLE SeatGeek_types (id INTEGER PRIMARY KEY, type TEXT)")
    for i in range(1, len(lst) + 1):
        cur.execute("INSERT INTO SeatGeek_types (id,type) VALUES (?,?)",(i,lst[i-1]))
        # print(i, lst[i-1])
    conn.commit()

def find_cities(lst):
    cities_lst = []
    for item in lst:
        for event in item["events"]:
            if event["venue"]["city"] not in cities_lst:
                cities_lst.append(event["venue"]["city"])    
    # print(cities_lst)  
    return cities_lst 

def create_cities_table(cur, conn, lst):
    cur.execute("DROP TABLE IF EXISTS SeatGeek_cities")
    cur.execute("CREATE TABLE SeatGeek_cities (id INTEGER PRIMARY KEY, city TEXT)")
    for i in range(1, len(lst) + 1):
        cur.execute("INSERT INTO SeatGeek_cities (id,city) VALUES (?,?)",(i,lst[i-1]))
        # print(i, lst[i-1])
    conn.commit()

def create_events_table(cur, conn, data, index, count, max, events, cities):
    
    lst = []
    while count <= max:
        for event in data[index]["events"]:
            count += 1
            event_type = 0
            location = 0

             # # ASSIGN EVENT TYPE NUM
            for type in events:
                if type == event["type"]:
                    event_type = events.index(type) + 1

            # ASSIGN LOCATION/CITY NUM
            for city in cities:
                if city == event["venue"]["city"]:
                    location = cities.index(city) + 1


            venue = event["venue"]["name_v2"]
            performer = event["performers"][0]["name"]

            lst.append(performer)
            if len(lst) > 25:
                break
                    
            cur.execute("INSERT INTO SeatGeek_events (id,performer,event,venue,location) VALUES (?,?,?,?,?)", (count, performer, event_type, venue, location))
    conn.commit()
    # print(lst)
    return count


def main():

    # Create database
    cur, conn = create_db("final.db")

    client_id = "MzMxMTQzMzB8MTY4MTY5ODU5MC4wMjcyMjUz"
    client_secret = "a690c0e907a03b4c2b760ba8d10013677be69f4fcf96858a435f2b37072b6b8d"
   
   # Retrieve data from API
    data_lst = get_data(client_id, client_secret, cur, conn)

    # Create table and list with all event types
    event_types = find_event_types(data_lst)
    create_type_table(cur, conn, event_types)

    # Create table and list with all cities
    cities_lst = find_cities(data_lst)
    create_cities_table(cur, conn, cities_lst)

    # Create table with all events
    cur.execute("DROP TABLE IF EXISTS SeatGeek_events")
    cur.execute("CREATE TABLE SeatGeek_events (id INTEGER PRIMARY KEY, performer TEXT, event INTEGER, venue TEXT, location INTEGER)")

    count1 = create_events_table(cur, conn, data_lst, 0, 0, 25, event_types, cities_lst)
    count2 = create_events_table(cur, conn, data_lst, 1, count1-1, 50, event_types, cities_lst)
    count3 = create_events_table(cur, conn, data_lst, 2, count2-1, 75, event_types, cities_lst)
    count4 = create_events_table(cur, conn, data_lst, 3, count3-1, 100, event_types, cities_lst)

    # CALCULATIONS 
    # Find the percentage brekdown of event type
    all = cur.execute("SELECT * FROM SeatGeek_events")
    total_lst = []
    for item in all:
        total_lst.append(item)
    total = len(total_lst)

    dict = {}
    count = 0
    for type in event_types:
        count += 1
        info_lst = []
        type_num = cur.execute("SELECT SeatGeek_events.performer, SeatGeek_types.type FROM SeatGeek_events JOIN SeatGeek_types ON SeatGeek_events.event = SeatGeek_types.id WHERE SeatGeek_types.type = ?", (type, ))
        for row in type_num:
            info_lst.append(row)
        dict[count] = info_lst
    # print(dict)

    calculations_lst = []
    for key in dict:
        num = len(dict[key])
        val = num/total
        # print(val)
        percent = int(val * 100)
        calculations_lst.append(percent)
    # print(calculations_lst)

    # Write calculations to text file
    f = open("Calculations.txt", "w")
    f.write("SeatGeek Calculations\n")
    f.write("\n")
    f.write("Percentage breakdown of SeatGeek event types:\n")
    
    string = ""
    for (event, num) in zip(event_types, calculations_lst):
        string = "Percentage of {} events: {}%".format(event, str(num))
        f.write(string)
        f.write("\n")

    # Create pie chart of breakdowns 
    fig, ax = plt.subplots(figsize =(10, 6))
    ax.set_title("SeatGeek Events Breakdown")

    y = np.array(calculations_lst)
    plt.pie(y, labels = event_types)
    plt.legend(title = "Event Types", bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.show() 

main()
        









        


# 
main()





